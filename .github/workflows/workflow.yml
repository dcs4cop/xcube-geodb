name: Unittest xcube-geodb

on:
  workflow_dispatch:
  push:
  release:
    types: [published]


env:
  APP_NAME: xcube-geodb
  SKIP_PSQL_TESTS: "0"
  RUN_UNITTESTS: "1"
  RUN_NB_TESTS: "1"
  DOCKER_BUILD_MY_BRANCH: "0"

jobs:
  unittest:
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo ${{ env.ACT }}
          echo ${{ env.SKIP_PSQL_TESTS }}
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        if: ${{ env.RUN_UNITTESTS == '1' }}
        with:
          mamba-version: "*"
          channels: conda-forge
          activate-environment: xcube-geodb
          environment-file: environment.yml
      - name: setup xcube-geodb
        if: ${{ env.RUN_UNITTESTS == '1' }}
        shell: bash -l {0}
        run: |
          conda info
          conda list
          mamba install -c conda-forge postgis
          python setup.py develop
      - name: unittest-xcube-geodb
        if: ${{ env.RUN_UNITTESTS == '1' }}
        shell: bash -l {0}
        run: |
          export SKIP_PSQL_TESTS=${{ env.SKIP_PSQL_TESTS }}
          pip install pytest
          pip install pytest-cov
          pytest --cov=./ --cov-report=xml
      - uses: codecov/codecov-action@v1
        if: ${{ env.RUN_UNITTESTS == '1' }}
        with:
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
  nb-test:
    runs-on: ubuntu-latest
    needs: unittest
    env:
      GEODB_API_SERVER_URL: ${{ secrets.GEODB_API_SERVER_URL }}
      GEODB_AUTH_CLIENT_ID: ${{ secrets.GEODB_AUTH_CLIENT_ID }}
      GEODB_AUTH_CLIENT_SECRET: ${{ secrets.GEODB_AUTH_CLIENT_SECRET }}
      GEODB_AUTH_DOMAIN: ${{ secrets.GEODB_AUTH_DOMAIN }}
      GEOSERVER_SERVER_URL: ${{ secrets.GEOSERVER_SERVER_URL }}
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        if: ${{ env.RUN_NB_TESTS == '1' }}
        with:
          mamba-version: "*"
          channels: conda-forge
          activate-environment: xcube-geodb
          environment-file: environment.yml
      - name: setup xcube-geodb
        if: ${{ env.RUN_NB_TESTS == '1' }}
        shell: bash -l {0}
        run: |
          conda info
          conda list
          python setup.py develop
      - name: install papermill
        if: ${{ env.RUN_NB_TESTS == '1' }}
        shell: bash -l {0}
        run: pip install papermill[all]
      - name: test-notebooks
        if: ${{ env.RUN_NB_TESTS == '1' }}
        shell: bash -l {0}
        working-directory: notebooks
        run: |
          for nb in *.ipynb
          do
            papermill $nb  $(basename -s .ipynb $nb)_out.ipynb
          done
  build-docker-image:
    runs-on: ubuntu-latest
    needs: nb-test
    name: build-docker-image
    env:
      APP_NAME: xcube-geodb
      ORG_NAME: bcdev
    steps:
      - name: git-checkout
        uses: actions/checkout@v2
      - name: get-release-tag
        id: release
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: get-real-version
        id: real-version
        run: |
          VERSION=$(echo "`cat xcube_geodb/version.py | cut -d "'" -f2`")
          echo ::set-output name=version::${VERSION}
      - name: info
        id: info
        run: |
          echo "TAG: ${{ steps.release.outputs.tag }}"
          echo "REAL_VERSION: ${{ steps.real-version.outputs.version }}"
          echo "EVENT: ${{ github.event_name }}"
      - uses: mr-smithers-excellent/docker-build-push@v5.5
        name: build-push-docker-image-latest
        with:
          image: ${{ env.ORG_NAME }}/${{ env.APP_NAME }}-lab
          addLatest: true
          registry: quay.io
          username: ${{ secrets.QUAY_REG_USERNAME }}
          password: ${{ secrets.QUAY_REG_PASSWORD }}
      - uses: mr-smithers-excellent/docker-build-push@v5.5
        name: build-push-docker-backend-image-latest
        with:
          image: ${{ env.ORG_NAME }}/${{ env.APP_NAME }}-backend
          directory: xcube_geodb/sql
          dockerfile: xcube_geodb/sql/Dockerfile
          addLatest: true
          registry: quay.io
          username: ${{ secrets.QUAY_REG_USERNAME }}
          password: ${{ secrets.QUAY_REG_PASSWORD }}
  update-version:
    env:
      PUSH: 1
    runs-on: ubuntu-latest
    needs: build-docker-image
    name: update-tag
    steps:
      - name: git-checkout
        uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: bc-org/k8s-configs
          token: ${{ secrets.API_TOKEN_GITHUB }}
          path: k8s
      - name: get-release-tag
        id: release
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: deployment-phase
        id: deployment-phase
        uses: bc-org/gha-determine-phase@v0.1
        with:
          event_name: ${{ github.event_name }}
          tag: ${{ steps.release.outputs.tag }}
      - name: get-hash
        id: get-hash
        run: |
          HASH=$(skopeo inspect docker://quay.io/bcdev/${{ env.APP_NAME }}-lab:${{ steps.release.outputs.tag }} | jq '.Digest')
          if [[ "$HASH" == *"sha256"* ]]; then
            echo ::set-output name=hash::$HASH
          else
            echo "No has present. Using none as hash. This will use the version tag instead for deployment."
            echo ::set-output name=hash::none
          fi
      - name: info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Deployment Stage: ${{ steps.deployment-phase.outputs.phase }}"

          echo "Release Tag: ${{ steps.release.outputs.tag }}"
          echo "Deployment Release Tag: ${{ steps.deployment-phase.outputs.tag }}"
          echo "Deployment Digest: ${{ steps.get-hash.outputs.hash }}"
      - name: set-version-tag
        uses: bc-org/update-application-version-tags@main
        with:
          app: ${{ env.APP_NAME }}
          phase: ${{ steps.deployment-phase.outputs.phase }}
          delimiter: ' '
          tag: ${{ steps.deployment-phase.outputs.tag }}
          hash: ${{ steps.get-hash.outputs.hash }}
          working-directory: "./k8s/${{ env.APP_NAME }}-jh/helm"
      - name: cat-result
        working-directory: "./k8s/${{ env.APP_NAME }}-jh/helm"
        run: |
          head values-dev.yaml
          head values-stage.yaml
#          No production deployment at the moment
#          head values-prod.yaml
      - name: Pushes to another repository
        # Don't run if run locally and should be ignored
        if: ${{ steps.deployment-phase.outputs.phase != 'ignore' && !env.ACT }}
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source-directory: 'k8s'
          destination-github-username: 'bc-org'
          destination-repository-name: 'k8s-configs'
          user-email: bcdev@brockmann-consult.de
          target-branch: main
          commit-message: ${{ github.event.release }}. Set version to ${{ steps.release.outputs.tag }}
